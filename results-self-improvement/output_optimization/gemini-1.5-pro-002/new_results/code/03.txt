from utils.model_generation import ModelGenerator

gen = ModelGenerator()

# Activities
check_inventory = gen.activity('Check current inventory level')
send_automated_alert = gen.activity('Send an automated alert')
send_manual_alert = gen.activity('Send a manual alert')
place_order = gen.activity('Place order with suppliers')
update_expected_delivery = gen.activity('Update inventory system with expected delivery dates')
receive_stock = gen.activity('Receive stock')
inspect_stock = gen.activity('Inspect stock for quality')
record_stock = gen.activity('Record stock in system')
place_stock_storage = gen.activity('Place stock in storage')
place_stock_shelves = gen.activity('Place stock on shelves')
update_inventory = gen.activity('Update inventory levels')


# Model reorder trigger (automated or manual)
reorder_trigger = gen.xor(send_automated_alert, send_manual_alert)

# Model placing stock in storage or on shelves
place_stock = gen.xor(place_stock_storage, place_stock_shelves)


# Main process flow.  Adding a loop for the check_inventory activity 
# to reflect the continuous monitoring aspect.  This allows for the 
# inventory to be checked repeatedly, triggering reorders as needed.
check_inventory_loop = gen.loop(do=check_inventory, redo=None)


final_model = gen.partial_order(dependencies=[\
    (check_inventory_loop, reorder_trigger),\
    (reorder_trigger, place_order),\
    (place_order, update_expected_delivery),\
    (update_expected_delivery, receive_stock),\
    (receive_stock, inspect_stock),\
    (inspect_stock, record_stock),\
    (record_stock, place_stock),\
    (place_stock, update_inventory)\
])