from utils.model_generation import ModelGenerator

gen = ModelGenerator()

# Activities
submit_request = gen.activity('Submit IT solution request')
assess_compatibility = gen.activity('Assess compatibility')
evaluate_cost = gen.activity('Evaluate cost and resource needs')
procure_tools = gen.activity('Procure necessary tools or licenses')
install_solution = gen.activity('Install the solution')
test_solution = gen.activity('Test solution')
rollout_solution = gen.activity('Roll out solution to requesting department')
provide_training = gen.activity('Provide training')
provide_support = gen.activity('Provide support for troubleshooting')

#Improved Partial Order:  Making procurement dependent on both assessment and evaluation.
main_flow = gen.partial_order(dependencies=[
    (submit_request, assess_compatibility),
    (submit_request, evaluate_cost),
    (assess_compatibility, procure_tools),
    (evaluate_cost, procure_tools), #Added dependency: Procurement waits for both assessment and evaluation.
    (procure_tools, install_solution),
    (install_solution, test_solution),
    (test_solution, rollout_solution)
])

# Optional training and support - kept as before.  Could be made to follow rollout, but text doesn't strictly enforce this ordering.
optional_training = gen.xor(provide_training, None)
optional_support = gen.xor(provide_support, None)


# Combine optional activities with main flow using partial order.  Improved to reflect that training and support are optional after rollout.
final_poset = gen.partial_order(dependencies=[
    (main_flow, optional_training),
    (main_flow, optional_support)
])


final_model = final_poset