from utils.model_generation import ModelGenerator

gen = ModelGenerator()

# Activities
identify_need = gen.activity('Identify need for new supplier or vendor')
issue_rfp = gen.activity('Issue request for proposals (RFP)')
receive_proposals = gen.activity('Receive supplier proposals')
evaluate_proposal = gen.activity('Evaluate proposal')
conduct_site_visit = gen.activity('Conduct site visit')
conduct_interview = gen.activity('Conduct interview')
select_supplier = gen.activity('Select supplier')
begin_negotiations = gen.activity('Begin contract negotiations')
sign_contract = gen.activity('Sign contract')
onboard_supplier = gen.activity('Onboard supplier')
execute_contract = gen.activity('Execute contract')

# Create copies to avoid reuse.  The number of copies needed depends on the branching and merging of the process flow.  Extra copies are added as a safety measure.
select_supplier_copy1 = select_supplier.copy()
select_supplier_copy2 = select_supplier.copy()
select_supplier_copy3 = select_supplier.copy()
select_supplier_copy4 = select_supplier.copy()


# Partial order for evaluation steps (site visit and/or interview are optional)
evaluation_poset = gen.partial_order(dependencies=[
    (evaluate_proposal, select_supplier_copy1),
    (conduct_site_visit, select_supplier_copy2),
    (conduct_interview, select_supplier_copy3)
])

# Combining evaluation steps. The entire evaluation is optional.
evaluation_steps = gen.xor(evaluation_poset, None)

# Main process flow.  The use of a partial order here allows for concurrency where appropriate, such as evaluating multiple proposals concurrently.
main_poset = gen.partial_order(dependencies=[
    (identify_need, issue_rfp),
    (issue_rfp, receive_proposals),
    (receive_proposals, evaluation_steps),
    (select_supplier_copy4, begin_negotiations),  # Use a copy of select_supplier
    (begin_negotiations, sign_contract),
    (sign_contract, onboard_supplier),
    (onboard_supplier, execute_contract)
])

final_model = main_poset