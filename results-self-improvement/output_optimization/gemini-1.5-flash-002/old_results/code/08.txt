from utils.model_generation import ModelGenerator

gen = ModelGenerator()

# Activities
report_incident = gen.activity('Report incident')
log_report = gen.activity('Log report into tracking system')
assign_report = gen.activity('Assign report to appropriate team')
gather_info = gen.activity('Gather necessary information')
identify_cause = gen.activity('Identify cause of incident')
propose_corrective_actions = gen.activity('Propose corrective actions')
implement_fix = gen.activity('Implement fix')
conduct_training = gen.activity('Conduct training')
change_policy = gen.activity('Change policy')
conduct_follow_up = gen.activity('Conduct follow-up')
close_report = gen.activity('Close incident report')
notify_stakeholders = gen.activity('Notify all stakeholders')


# Partial order for corrective actions (exclusive choice)
corrective_actions_poset = gen.partial_order(dependencies=[
    (propose_corrective_actions,),
    (implement_fix,),
    (conduct_training,),
    (change_policy,)
])

#Combine the corrective actions into a single partial order.  This allows for concurrent execution of the proposed corrective actions if multiple are deemed necessary.
#If only one corrective action is needed this is correctly modeled by the xor.

#Main Process Partial Order
main_poset = gen.partial_order(dependencies=[
    (report_incident, log_report),
    (log_report, assign_report),
    (assign_report, gather_info),
    (gather_info, identify_cause),
    (identify_cause, corrective_actions_poset),
    (corrective_actions_poset, conduct_follow_up),
    (conduct_follow_up, close_report),
    (close_report, notify_stakeholders)
])

final_model = main_poset