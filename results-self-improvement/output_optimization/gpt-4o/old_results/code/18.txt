from utils.model_generation import ModelGenerator
gen = ModelGenerator()

# Activities
submit_application = gen.activity('Submit application online')
review_documents = gen.activity('Review application and documents')
notify_missing_docs = gen.activity('Notify applicant of missing documents')
provide_missing_docs = gen.activity('Provide missing documents')
evaluate_application = gen.activity('Evaluate application by admissions committee')
process_fees = gen.activity('Process fees or waivers')
send_acceptance = gen.activity('Send acceptance letter')
send_rejection = gen.activity('Send rejection letter')
confirm_enrollment = gen.activity('Confirm enrollment')
cancel_application = gen.activity('Cancel application')
send_orientation = gen.activity('Send orientation materials')
set_up_IT_accounts = gen.activity('Set up IT accounts')
assist_with_visa = gen.activity('Assist with visa processing')
obtain_student_id = gen.activity('Obtain student ID card')
meet_academic_advisor = gen.activity('Meet with academic advisor')
select_courses = gen.activity('Select courses')
resolve_conflicts = gen.activity('Resolve schedule conflicts')
begin_classes = gen.activity('Begin attending classes')
add_drop_courses = gen.activity('Add/drop courses')
post_grades = gen.activity('Post grades')
review_grades_online = gen.activity('Review grades online')
submit_appeal = gen.activity('Submit appeal form')
meet_appeals_committee = gen.activity('Meet with appeals committee')
await_decision = gen.activity('Await decision')
graduate = gen.activity('Graduate')
withdraw = gen.activity('Withdraw')

# Subprocesses
check_documents_poset = gen.partial_order(dependencies=[
    (review_documents, notify_missing_docs),
    (notify_missing_docs, provide_missing_docs),
])

# Choice after application review (Accept or Reject)
admission_decision = gen.xor(send_acceptance, send_rejection)

# Create a copy of the admission decision XOR construct
admission_decision_copy = admission_decision.copy()

# Fees and admission evaluation happen concurrently
evaluate_and_fees_poset = gen.partial_order(dependencies=[
    (evaluate_application, admission_decision),
    (process_fees,)
])

# Enrollment Confirmation Process
confirm_or_cancel_enrollment = gen.xor(
    gen.partial_order(dependencies=[
        (confirm_enrollment, send_orientation),
        (send_orientation, set_up_IT_accounts),
        (set_up_IT_accounts, assist_with_visa),
    ]),
    cancel_application
)

# Student's Academic Process after Enrollment
academic_process = gen.partial_order(dependencies=[
    (obtain_student_id, meet_academic_advisor),
    (meet_academic_advisor, select_courses),
    (select_courses, resolve_conflicts),
    (resolve_conflicts, begin_classes)
])

# Copy of "Begin attending classes" for the loop
begin_classes_copy = begin_classes.copy()

# Repeating semester loop
semester_loop = gen.loop(
    do=gen.partial_order(dependencies=[
        (begin_classes_copy, add_drop_courses),
        (add_drop_courses, post_grades),
        (post_grades, review_grades_online),
    ]),
    redo=None
)

# Appeal process
appeal_process = gen.partial_order(dependencies=[
    (submit_appeal, meet_appeals_committee),
    (meet_appeals_committee, await_decision)
])

# Complete academic process with graduation or withdrawal
academic_completion = gen.xor(graduate, withdraw)

# Final process model
final_model = gen.partial_order(dependencies=[
    (submit_application, check_documents_poset),
    (check_documents_poset, evaluate_and_fees_poset),
    (admission_decision_copy, confirm_or_cancel_enrollment),
    (confirm_or_cancel_enrollment, academic_process),
    (academic_process, semester_loop),
    (semester_loop, appeal_process),
    (semester_loop, academic_completion)
])