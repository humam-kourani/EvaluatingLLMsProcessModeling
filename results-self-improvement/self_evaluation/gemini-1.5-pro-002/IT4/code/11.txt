from utils.model_generation import ModelGenerator

gen = ModelGenerator()

# Initial steps
customer_signs_up = gen.activity('Customer signs up')
generate_account = gen.activity('Generate account')
assign_access = gen.activity('Assign access')
set_automatic_triggers_for_billing_cycles = gen.activity('Set automatic triggers for billing cycles')

initial_steps = gen.partial_order(dependencies=[
    (customer_signs_up, generate_account),
    (generate_account, assign_access),
    (assign_access, set_automatic_triggers_for_billing_cycles)
])

# Regular updates/enhancements/notifications
send_regular_updates = gen.activity('Send regular updates')
send_product_enhancements = gen.activity('Send product enhancements')
send_renewal_notifications = gen.activity('Send renewal notifications')

regular_communications = gen.partial_order(dependencies=[
    (send_regular_updates,),
    (send_product_enhancements,),
    (send_renewal_notifications,)
])

regular_communications_loop = gen.loop(do=regular_communications, redo=None)


# Cancellation process
customer_submits_cancellation_request = gen.activity('Customer submits cancellation request')
apply_charges = gen.activity('apply charges')
apply_refund = gen.activity('apply refund')

charges_or_refund = gen.xor(apply_charges, apply_refund)

cancellation_process = gen.partial_order(
    dependencies=[(customer_submits_cancellation_request, charges_or_refund)])


# Deactivation and final settlement
deactivate_subscription = gen.activity('Deactivate subscription')
settle_final_account_balance = gen.activity('Settle final account balance')

deactivation_and_settlement = gen.partial_order(dependencies=[
    (deactivate_subscription, settle_final_account_balance)
])

# Optional Cancellation
optional_cancellation = gen.xor(cancellation_process, None)

# Main process flow with optional cancellation
final_model = gen.partial_order(dependencies=[
    (initial_steps, regular_communications_loop),
    (regular_communications_loop, optional_cancellation),
    (optional_cancellation, deactivation_and_settlement) if optional_cancellation is not None
    else (regular_communications_loop, deactivation_and_settlement)
])