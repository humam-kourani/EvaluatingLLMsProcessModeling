from utils.model_generation import ModelGenerator

gen = ModelGenerator()

# Initial activities
send_notification = gen.activity('Send notification')
prepare_financial_statements = gen.activity('Prepare financial statements')
gather_necessary_documents = gen.activity('Gather necessary documents')
check_regulatory_updates = gen.activity('Check regulatory updates')

# Prepare and submit documents
prepare_and_submit = gen.partial_order(dependencies=[
    (prepare_financial_statements,), (gather_necessary_documents,)
])

submit_documents = gen.activity('Submit documents')

# Review and clarification loop
review_submission = gen.activity('Review submission')
request_clarifications = gen.activity('Request clarifications of discrepancies')
receive_clarifications = gen.activity('Receive clarifications')

clarification_loop = gen.loop(do=None, redo=gen.partial_order(dependencies=[
    (request_clarifications, receive_clarifications)
]))

# Placeholder to close the loop gracefully.
complete_risk_assessment_mitigation = gen.activity("Complete risk assessment/mitigation")

review_and_clarify = gen.partial_order(dependencies=[
    (review_submission, clarification_loop),
    (clarification_loop, complete_risk_assessment_mitigation)
])

# Risk assessment
evaluate_financial_risks = gen.activity('Evaluate financial risks')
evaluate_operational_risks = gen.activity('Evaluate operational risks')
evaluate_compliance_risks = gen.activity('Evaluate compliance risks')

risk_assessment_activities = gen.partial_order(dependencies=[
    (evaluate_financial_risks,), (evaluate_operational_risks,), (evaluate_compliance_risks,)
])

# Investigation (optional)
launch_detailed_investigation = gen.activity('Launch detailed investigation')
conduct_data_analysis = gen.activity('Conduct data analysis')
conduct_interviews = gen.activity('Conduct interviews')
perform_site_visits = gen.activity('Perform site visits')

investigation_activities = gen.partial_order(dependencies=[
    (conduct_data_analysis,), (conduct_interviews,), (perform_site_visits,)
])


optional_investigation = gen.xor(investigation_activities, None)



# Report compilation and review
compile_audit_report = gen.activity('Compile audit report')
review_report = gen.activity('Review report by audit director')
approve_report = gen.activity('Approve report')
send_report_for_revision = gen.activity('Send report for revision')
update_and_resubmit_report = gen.activity('Update and resubmit report')

report_review_loop = gen.loop(do=None, redo=gen.partial_order(dependencies=[
    (send_report_for_revision, update_and_resubmit_report)
]))

review_approve_loop = gen.partial_order(dependencies=[
    (review_report, gen.xor(approve_report, report_review_loop))
])

# Finalization and closure
distribute_final_report = gen.activity('Distribute final report')
archive_report = gen.activity('Archive report')
distribute_and_archive = gen.partial_order(dependencies=[(distribute_final_report,), (archive_report,)])
close_audit_process = gen.activity('Close audit process')

# Main process flow

initial_activities = gen.partial_order(dependencies=[(prepare_and_submit, submit_documents), (check_regulatory_updates,)])

final_model = gen.partial_order(dependencies=[
    (send_notification, initial_activities),
    (initial_activities, review_and_clarify),
    (review_and_clarify, risk_assessment_activities),
    (risk_assessment_activities, optional_investigation),
    (optional_investigation, compile_audit_report),
    (compile_audit_report, review_approve_loop),
    (review_approve_loop, distribute_and_archive),
    (distribute_and_archive, close_audit_process)
])