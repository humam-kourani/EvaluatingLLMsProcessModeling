from utils.model_generation import ModelGenerator

gen = ModelGenerator()

submit_request = gen.activity('Submit IT solution request')
assess_compatibility = gen.activity('Assess compatibility')
evaluate_cost = gen.activity('Evaluate cost and resource needs')
procure_tools = gen.activity('Procure necessary tools or licenses')
install_solution = gen.activity('Install the solution')
test_solution = gen.activity('Test solution')
roll_out_solution = gen.activity('Roll out solution to requesting department')
provide_training = gen.activity('Provide training')
provide_support = gen.activity('Provide support for troubleshooting')

optional_training = gen.xor(provide_training, None)

# Main process flow after request submission
assessment_flow = gen.partial_order(dependencies=[(assess_compatibility, evaluate_cost)])
procurement_flow = gen.partial_order(dependencies=[(procure_tools, install_solution), (install_solution, test_solution)])

# Create a copy of test_solution to avoid reuse
test_solution_copy = test_solution.copy()

post_testing = gen.partial_order(dependencies=[(test_solution_copy, roll_out_solution), (roll_out_solution, optional_training)])

# Combine assessment, procurement, and post-testing flows
implementation_flow = gen.partial_order(dependencies=[(assessment_flow, procurement_flow), (procurement_flow, post_testing)])


# Complete process, integrating support concurrently
final_model = gen.partial_order(dependencies=[(submit_request, implementation_flow), (provide_support,)])