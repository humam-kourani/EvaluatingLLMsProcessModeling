from utils.model_generation import ModelGenerator

gen = ModelGenerator()

# Initial steps
submit_application = gen.activity('Submit application online')
review_application = gen.activity('Review application and documents')
notify_missing_docs = gen.activity('Notify applicant of missing documents')
provide_missing_docs = gen.activity('Provide missing documents')
missing_docs_loop = gen.loop(do=None, redo=gen.partial_order(dependencies=[(notify_missing_docs, provide_missing_docs)]))
evaluate_application = gen.activity('Evaluate application by admissions committee')
process_fees = gen.activity('Process fees or waivers')

initial_steps = gen.partial_order(dependencies=[(submit_application, review_application), (review_application, missing_docs_loop), (missing_docs_loop, evaluate_application)])


# Acceptance and rejection path
send_acceptance = gen.activity('Send acceptance letter')
send_rejection = gen.activity('Send rejection letter')
acceptance_choice = gen.xor(send_acceptance, send_rejection)

initial_steps_with_fees = gen.partial_order(dependencies=[(initial_steps,), (process_fees,)])

application_process = gen.partial_order(dependencies=[(initial_steps_with_fees, acceptance_choice)])


# Enrollment and subsequent steps
confirm_enrollment = gen.activity('Confirm enrollment')
cancel_application = gen.activity('Cancel application')
enrollment_choice = gen.xor(confirm_enrollment, cancel_application)

send_orientation = gen.activity('Send orientation materials')
setup_it = gen.activity('Set up IT accounts')
assist_visa = gen.activity('Assist with visa processing')
optional_visa = gen.xor(assist_visa, None)

obtain_id = gen.activity('Obtain student ID card')

meet_advisor = gen.activity('Meet with academic advisor')
select_courses = gen.activity('Select courses')
resolve_conflicts = gen.activity('Resolve schedule conflicts')
study_plan = gen.partial_order(dependencies=[(meet_advisor, select_courses), (select_courses, resolve_conflicts)])


begin_classes = gen.activity('Begin attending classes')

add_drop = gen.activity('Add/drop courses')
post_grades = gen.activity('Post grades')
review_grades = gen.activity('Review grades online')

submit_appeal = gen.activity('Submit appeal form')
meet_committee = gen.activity('Meet with appeals committee')
await_decision = gen.activity('Await decision')
appeal_process = gen.partial_order(dependencies=[(submit_appeal, meet_committee), (meet_committee, await_decision)])
optional_appeal = gen.xor(appeal_process, None)

# The issue was the reuse of begin_classes within the semester loop.  We need to copy it each time.
semester_activities = gen.loop(do=gen.partial_order(dependencies=[(begin_classes.copy(),), (gen.loop(do=None, redo=add_drop),), (post_grades, review_grades), (review_grades, optional_appeal)]), redo=None)



graduate = gen.activity('Graduate')
withdraw = gen.activity('Withdraw')
graduation_choice = gen.xor(graduate, withdraw)




# Copies to avoid reuse errors
send_acceptance_copy = send_acceptance.copy()


after_acceptance = gen.partial_order(dependencies=[(send_acceptance_copy, enrollment_choice), (enrollment_choice, send_orientation),
                                              (enrollment_choice, setup_it), (enrollment_choice, optional_visa),
                                               (enrollment_choice, obtain_id), (obtain_id, study_plan),
                                              (study_plan, begin_classes)])





final_model = gen.partial_order(dependencies=[(application_process, after_acceptance), (after_acceptance, semester_activities), (semester_activities, graduation_choice)])