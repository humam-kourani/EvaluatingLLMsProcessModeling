from utils.model_generation import ModelGenerator

gen = ModelGenerator()

# Customer placing an order
customer_places_order_online = gen.activity('Customer places order online')
customer_places_order_over_phone = gen.activity('Customer places order over the phone')
order_placed = gen.xor(customer_places_order_online, customer_places_order_over_phone)

# Order processing
generate_and_send_order_confirmation = gen.activity('Generate and send order confirmation')
pick_and_pack_items = gen.activity('Pick and pack items')
generate_shipping_label = gen.activity('Generate shipping label')
hand_over_order_to_logistics_provider = gen.activity('Hand over order to logistics provider')
send_tracking_information_to_customer = gen.activity('Send tracking information to customer')

order_processing = gen.partial_order(dependencies=[
    (order_placed, generate_and_send_order_confirmation),
    (generate_and_send_order_confirmation, pick_and_pack_items),
    (pick_and_pack_items, generate_shipping_label),
    (generate_shipping_label, hand_over_order_to_logistics_provider),
    (hand_over_order_to_logistics_provider, send_tracking_information_to_customer)
])

# Delivery and post-delivery
monitor_shipment = gen.activity('Monitor shipment')
successful_delivery = gen.activity('Successful delivery')
process_customer_feedback_or_returns = gen.activity('Process customer feedback or returns')
optional_post_delivery_actions = gen.xor(process_customer_feedback_or_returns, None)

delivery_and_post_delivery = gen.partial_order(dependencies=[
    (order_processing, monitor_shipment), # Directly link order processing to monitoring
    (monitor_shipment, successful_delivery),
    (successful_delivery, optional_post_delivery_actions)
])


final_model = delivery_and_post_delivery # The final model is the combined sequence