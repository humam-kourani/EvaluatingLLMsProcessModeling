from utils.model_generation import ModelGenerator

gen = ModelGenerator()

# Initial steps
search_ticket = gen.activity('Customer searches for ticket')
select_route = gen.activity('Select route')
select_date_time = gen.activity('Select date and time')

# Booking process
provide_personal_info = gen.activity('Provide personal information')
provide_payment = gen.activity('Provide payment details')
generate_ticket = gen.activity('Generate ticket')
send_ticket_email = gen.activity('Send ticket via email')
send_ticket_sms = gen.activity('Send ticket via SMS')
send_ticket = gen.xor(send_ticket_email, send_ticket_sms)  # Either email or SMS
update_inventory = gen.activity('Update seat inventory')

booking_process = gen.partial_order(dependencies=[
    (provide_personal_info, provide_payment),
    (provide_payment, generate_ticket),
    (generate_ticket, send_ticket),
    (generate_ticket, update_inventory)  # Ticket generation triggers inventory update
])

# Pre-travel communication
send_reminder = gen.activity('Send reminder')
send_instructions = gen.activity('Send instructions')
pre_travel_comm = gen.partial_order(dependencies=[(send_reminder,), (send_instructions,)]) # Reminders and instructions can be sent concurrently
optional_pre_travel_comm = gen.xor(pre_travel_comm, None)

# Journey completion and post-travel
journey_complete = gen.activity('Customer completes journey')
post_travel_services = gen.activity('Post-travel feedback or services')
optional_post_travel = gen.xor(post_travel_services, None)

# Combine all parts
final_model = gen.partial_order(dependencies=[
    (search_ticket, select_route),
    (select_route, select_date_time),
    (select_date_time, booking_process),
    (booking_process, optional_pre_travel_comm),
    (optional_pre_travel_comm, journey_complete),
    (journey_complete, optional_post_travel)
])