from utils.model_generation import ModelGenerator

gen = ModelGenerator()

# Initial steps
customer_signs_up = gen.activity('Customer signs up')
generate_account = gen.activity('Generate account')
assign_access = gen.activity('Assign access')
set_automatic_triggers_for_billing_cycles = gen.activity(
    'Set automatic triggers for billing cycles')

initial_steps = gen.partial_order(dependencies=[
    (customer_signs_up, generate_account),
    (generate_account, assign_access),
    (generate_account, set_automatic_triggers_for_billing_cycles)])

# Regular updates/enhancements/notifications during subscription
send_regular_updates = gen.activity('Send regular updates')
send_product_enhancements = gen.activity('Send product enhancements')
send_renewal_notifications = gen.activity('Send renewal notifications')

regular_activities = gen.partial_order(dependencies=[
    (send_regular_updates,), (send_product_enhancements,), (send_renewal_notifications,)])

regular_activities_loop = gen.loop(do=regular_activities, redo=None)


# Cancellation process
customer_submits_cancellation_request = gen.activity(
    'Customer submits cancellation request')
apply_refund = gen.activity('apply refund')
apply_charges = gen.activity('apply charges')
deactivate_subscription = gen.activity('Deactivate subscription')
settle_final_account_balance = gen.activity('Settle final account balance')

charges_or_refund = gen.xor(apply_charges, apply_refund)  # Exclusive choice

cancellation_process = gen.partial_order(dependencies=[
    (customer_submits_cancellation_request, charges_or_refund),
    (charges_or_refund, deactivate_subscription),
    (deactivate_subscription, settle_final_account_balance)
])


# Main process flow
subscription_or_cancellation = gen.xor(
    regular_activities_loop, cancellation_process)


final_model = gen.partial_order(dependencies=[
    (initial_steps, subscription_or_cancellation)])