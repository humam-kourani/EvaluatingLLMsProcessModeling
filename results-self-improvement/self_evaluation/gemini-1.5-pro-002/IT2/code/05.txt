from utils.model_generation import ModelGenerator

gen = ModelGenerator()

# Initial activities
identify_need = gen.activity('Identify need for new supplier or vendor')
issue_rfp = gen.activity('Issue request for proposals (RFP)')
receive_proposals = gen.activity('Receive supplier proposals')

# Evaluation activities (can occur concurrently)
evaluate_proposal = gen.activity('Evaluate proposal')
conduct_interview = gen.activity('Conduct interview')
conduct_site_visit = gen.activity('Conduct site visit')

# Group evaluation activities as a partial order to represent concurrency
evaluation_activities = gen.partial_order(dependencies=[(evaluate_proposal,), (conduct_interview,), (conduct_site_visit,)])

# Selection and contract activities
select_supplier = gen.activity('Select supplier')
begin_negotiations = gen.activity('Begin contract negotiations')
sign_contract = gen.activity('Sign contract')

# Onboarding and execution
onboard_supplier = gen.activity('Onboard supplier')
execute_contract = gen.activity('Execute contract')

# Combine all activities into a partial order with dependencies
final_model = gen.partial_order(
    dependencies=[
        (identify_need, issue_rfp),
        (issue_rfp, receive_proposals),
        (receive_proposals, evaluation_activities),
        (evaluation_activities, select_supplier),
        (select_supplier, begin_negotiations),
        (begin_negotiations, sign_contract),
        (sign_contract, onboard_supplier),
        (onboard_supplier, execute_contract)
    ]
)