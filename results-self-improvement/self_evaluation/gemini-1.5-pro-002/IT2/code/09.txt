from utils.model_generation import ModelGenerator

gen = ModelGenerator()

# Initial activities
identify_idea = gen.activity('Identify idea for new product or improvement')
conduct_research = gen.activity('Conduct initial research')
conduct_feasibility_studies = gen.activity('Conduct feasibility studies')
draft_design_concepts = gen.activity('Draft design concepts')
select_promising_design = gen.activity('Select promising design')
build_prototype = gen.activity('Build prototype')

# Testing phase activities
test_functionality = gen.activity('Test functionality')
test_safety = gen.activity('Test safety')
test_market_potential = gen.activity('Test market potential')
collect_feedback = gen.activity('Collect feedback from testing phase')

# Refinement and decision activities
refine_prototype = gen.activity('Refine prototype')
approve_prototype = gen.activity('Approve prototype for further development')
discard_prototype = gen.activity('Discard prototype')


# Testing sub-process (concurrent tests)
testing_phase = gen.partial_order(dependencies=[(test_functionality,), (test_safety,), (test_market_potential,)])

# Test and feedback collection sequence
test_and_feedback = gen.partial_order(dependencies=[(testing_phase, collect_feedback)])

# Refinement loop
refinement_loop = gen.loop(do=test_and_feedback, redo=refine_prototype)

# Complete prototype development process up to the decision point
prototype_development = gen.partial_order(dependencies=[
    (identify_idea, conduct_research),
    (conduct_research, conduct_feasibility_studies),
    (conduct_feasibility_studies, draft_design_concepts),
    (draft_design_concepts, select_promising_design),
    (select_promising_design, build_prototype),
    (build_prototype, refinement_loop)
])


# Final decision (approve or discard)
final_decision = gen.xor(approve_prototype, discard_prototype)

# Combine all parts
final_model = gen.partial_order(dependencies=[(prototype_development, final_decision)])