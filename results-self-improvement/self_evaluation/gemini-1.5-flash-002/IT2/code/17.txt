from utils.model_generation import ModelGenerator

gen = ModelGenerator()

# Activities
place_order = gen.activity('Place order')
record_order_details = gen.activity('Record order details')
process_payment = gen.activity('Process payment')
notify_about_failed_payment = gen.activity('Notify about failed payment')
check_stock_availability = gen.activity('Check stock availability')
initiate_back_order = gen.activity('Initiate back-order')
inform_customer_about_delay = gen.activity('Inform customer about delay')
receive_back_order = gen.activity('Receive back-order')
pick_items_from_warehouse = gen.activity('Pick items from warehouse')
perform_quality_control_checks = gen.activity('Perform quality control checks')
package_items = gen.activity('Package items')
gift_wrap_items = gen.activity('Gift wrap items')
prepare_shipping_documents_and_labels = gen.activity('Prepare shipping documents and labels')
prepare_documentation_for_international_orders = gen.activity('Prepare documentation for international orders')
dispatch_order = gen.activity('Dispatch order')
send_shipping_confirmation_to_customer = gen.activity('Send shipping confirmation to customer')
update_inventory_levels = gen.activity('Update inventory levels')
send_follow_up_email = gen.activity('Send follow-up email')
customer_reports_issue = gen.activity('Customer reports issue')
send_return_shipping_label = gen.activity('Send return shipping label')
receive_returned_items = gen.activity('Receive returned items')
inspect_returned_items = gen.activity('Inspect returned items')
process_refund = gen.activity('Process refund')
process_replacement = gen.activity('Process replacement')
confirm_delivery = gen.activity('Confirm delivery')


# Subprocesses
payment_processing = gen.xor(process_payment, notify_about_failed_payment)
backorder_handling = gen.partial_order(dependencies=[(initiate_back_order, inform_customer_about_delay), (inform_customer_about_delay, receive_back_order)])
stock_check = gen.xor(pick_items_from_warehouse, backorder_handling)
packaging = gen.xor(package_items, gen.xor(gift_wrap_items, None)) # Gift wrapping is optional
shipping = gen.partial_order(dependencies=[(prepare_shipping_documents_and_labels, dispatch_order.copy()), (gen.xor(prepare_documentation_for_international_orders, None), dispatch_order.copy())]) # International docs are optional, dispatch_order copied to avoid reuse
post_dispatch = gen.partial_order(dependencies=[(dispatch_order.copy(), send_shipping_confirmation_to_customer), (send_shipping_confirmation_to_customer, update_inventory_levels)]) # dispatch_order copied to avoid reuse
returns_process = gen.partial_order(dependencies=[(send_return_shipping_label, receive_returned_items), (receive_returned_items, inspect_returned_items), (inspect_returned_items, gen.xor(process_refund, process_replacement))])
customer_feedback = gen.partial_order(dependencies=[(confirm_delivery, send_follow_up_email), (customer_reports_issue, returns_process)])

# Main process
main_process = gen.partial_order(dependencies=[(place_order, record_order_details), (record_order_details, payment_processing), (payment_processing, stock_check), (stock_check, perform_quality_control_checks), (perform_quality_control_checks, packaging), (packaging, shipping), (shipping, post_dispatch), (post_dispatch, customer_feedback)])


final_model = main_process