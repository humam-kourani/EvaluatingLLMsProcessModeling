from utils.model_generation import ModelGenerator

gen = ModelGenerator()

submit_request = gen.activity('Submit IT solution request')
assess_compatibility = gen.activity('Assess compatibility')
evaluate_cost = gen.activity('Evaluate cost and resource needs')
procure_tools = gen.activity('Procure necessary tools or licenses')
install_solution = gen.activity('Install the solution')
test_solution = gen.activity('Test solution')
rollout_solution = gen.activity('Roll out solution to requesting department')
provide_training = gen.activity('Provide training')
provide_support = gen.activity('Provide support for troubleshooting')

#Partial order for the approval path
approved_poset = gen.partial_order(dependencies=[
    (assess_compatibility.copy(), evaluate_cost), # Create a copy of assess_compatibility
    (evaluate_cost, procure_tools),
    (procure_tools, install_solution),
    (install_solution, test_solution),
    (test_solution, rollout_solution.copy()) # Create a copy of rollout_solution
])

#Optional training
optional_training = gen.xor(provide_training, None)

#Partial order combining rollout and optional training and support
final_poset = gen.partial_order(dependencies=[
    (rollout_solution, optional_training),
    (rollout_solution, provide_support)

])

#Combining initial request assessment and the approved path
initial_assessment_poset = gen.partial_order(dependencies=[
    (submit_request, assess_compatibility.copy()), #Create a copy of assess_compatibility
    (assess_compatibility,approved_poset)

])


#Final Model
final_model = gen.partial_order(dependencies=[(initial_assessment_poset, final_poset)])