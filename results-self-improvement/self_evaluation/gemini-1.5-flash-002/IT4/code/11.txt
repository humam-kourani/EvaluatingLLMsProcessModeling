from utils.model_generation import ModelGenerator

gen = ModelGenerator()

# Activities
customer_signs_up = gen.activity('Customer signs up')
enter_info = gen.activity('enter personal and payment information')
generate_account = gen.activity('Generate account')
assign_access = gen.activity('Assign access')
set_auto_billing = gen.activity('Set automatic triggers for billing cycles')
send_regular_updates = gen.activity('Send regular updates')
send_product_enhancements = gen.activity('Send product enhancements')
send_renewal_notifications = gen.activity('Send renewal notifications')
customer_submits_cancellation = gen.activity('Customer submits cancellation request')
support_processes_cancellation = gen.activity('Support team processes cancellation request')
apply_refund = gen.activity('apply refund')
apply_charges = gen.activity('apply charges')
deactivate_subscription = gen.activity('Deactivate subscription')
settle_final_balance = gen.activity('Settle final account balance')


# Subprocesses
initial_setup = gen.partial_order(dependencies=[(customer_signs_up, enter_info), (enter_info, generate_account), (generate_account, assign_access), (assign_access, set_auto_billing)])
ongoing_service = gen.partial_order(dependencies=[(send_regular_updates,), (send_product_enhancements,), (send_renewal_notifications,)])
cancellation_process = gen.partial_order(dependencies=[(customer_submits_cancellation, support_processes_cancellation), (support_processes_cancellation, deactivate_subscription.copy()), (support_processes_cancellation, apply_refund), (support_processes_cancellation, apply_charges)])
finalization = gen.partial_order(dependencies=[(deactivate_subscription.copy(), settle_final_balance)])

# Combining subprocesses
main_flow = gen.partial_order(dependencies=[(initial_setup, ongoing_service), (ongoing_service, cancellation_process), (cancellation_process, finalization)])
optional_cancellation = gen.xor(main_flow, None)

final_model = optional_cancellation