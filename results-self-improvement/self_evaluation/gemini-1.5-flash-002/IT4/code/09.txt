from utils.model_generation import ModelGenerator

gen = ModelGenerator()

# Activities
identify_idea = gen.activity("Identify idea for new product or improvement")
conduct_initial_research = gen.activity("Conduct initial research")
conduct_feasibility_studies = gen.activity("Conduct feasibility studies")
draft_design_concepts = gen.activity("Draft design concepts")
select_promising_design = gen.activity("Select promising design")
build_prototype = gen.activity("Build prototype")
test_functionality = gen.activity("Test functionality")
test_safety = gen.activity("Test safety")
test_market_potential = gen.activity("Test market potential")
collect_feedback = gen.activity("Collect feedback from testing phase")
refine_prototype = gen.activity("Refine prototype")
approve_prototype = gen.activity("Approve prototype for further development")
discard_prototype = gen.activity("Discard prototype")

# Research and Design Phase
research_and_design = gen.partial_order(dependencies=[(identify_idea, conduct_initial_research), 
                                                      (conduct_initial_research, conduct_feasibility_studies),
                                                      (conduct_feasibility_studies, draft_design_concepts),
                                                      (draft_design_concepts, select_promising_design)])

# Prototype Development and Testing Loop
select_promising_design_copy = select_promising_design.copy() # Create a copy to avoid reuse
build_prototype_step = gen.partial_order(dependencies=[(select_promising_design_copy, build_prototype)])

build_prototype_copy = build_prototype.copy() #Create a copy to avoid reuse in testing_phase
testing_phase = gen.partial_order(dependencies=[(build_prototype_copy, test_functionality),
                                                (build_prototype_copy, test_safety),
                                                (build_prototype_copy, test_market_potential)])

feedback_loop = gen.loop(do=testing_phase, redo=gen.partial_order(dependencies=[(collect_feedback, refine_prototype), (refine_prototype, build_prototype_step.copy())]))

# Final Choice and End
final_choice = gen.xor(approve_prototype, discard_prototype)

# Combine all parts
final_model = gen.partial_order(dependencies=[(research_and_design, build_prototype_step), (build_prototype_step, feedback_loop), (feedback_loop, final_choice)])