from utils.model_generation import ModelGenerator

gen = ModelGenerator()

# Activities
file_complaint = gen.activity('File complaint')
log_complaint = gen.activity('Log complaint')
assign_complaint = gen.activity('Assign complaint to relevant department')
review_complaint = gen.activity('Review complaint details')
approve_notify = gen.activity('Approve and notify customer')
reject_notify = gen.activity('Reject and notify customer')
process_reimbursement = gen.activity('Process reimbursement')
resolve_complaint_original = gen.activity('Resolve complaint') #Original, will be copied
provide_feedback = gen.activity('Provide feedback')


# Partial Order for Complaint Handling
poset_complaint_handling = gen.partial_order(dependencies=[
    (file_complaint, log_complaint),
    (log_complaint, assign_complaint),
    (assign_complaint, review_complaint)
])

# XOR for Refund Decision
approve_notify_copy1 = approve_notify.copy()
reject_notify_copy1 = reject_notify.copy()

refund_decision = gen.xor(approve_notify_copy1, reject_notify_copy1)

# Partial Order for Refund Process (optional)
approve_notify_copy2 = approve_notify.copy()
poset_refund_process = gen.partial_order(dependencies=[
    (approve_notify_copy2, process_reimbursement),
    (process_reimbursement, resolve_complaint_original)
])

# Combining Refund Decision and Process
reject_notify_copy2 = reject_notify.copy()
combined_refund = gen.xor(poset_refund_process, reject_notify_copy2)

#Final Model. We create copies to avoid reuse of nodes.
resolve_complaint_copy1 = resolve_complaint_original.copy()
resolve_complaint_copy2 = resolve_complaint_original.copy()
reject_notify_copy3 = reject_notify.copy()

final_model = gen.partial_order(dependencies=[
    (poset_complaint_handling, combined_refund),
    (combined_refund, resolve_complaint_copy1),
    (resolve_complaint_copy1, provide_feedback),
    (reject_notify_copy3, resolve_complaint_copy2) 
])