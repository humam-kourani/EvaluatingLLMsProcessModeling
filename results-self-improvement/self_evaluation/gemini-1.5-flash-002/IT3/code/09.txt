from utils.model_generation import ModelGenerator

gen = ModelGenerator()

# Activities
identify_idea = gen.activity('Identify idea for new product or improvement')
conduct_research = gen.activity('Conduct initial research')
conduct_feasibility = gen.activity('Conduct feasibility studies')
draft_designs = gen.activity('Draft design concepts')
select_design = gen.activity('Select promising design')
build_prototype = gen.activity('Build prototype')
test_functionality = gen.activity('Test functionality')
test_safety = gen.activity('Test safety')
test_market = gen.activity('Test market potential')
collect_feedback = gen.activity('Collect feedback from testing phase')
refine_prototype = gen.activity('Refine prototype')
approve_prototype = gen.activity('Approve prototype for further development')
discard_prototype = gen.activity('Discard prototype')

# Subprocesses
research_phase = gen.partial_order(dependencies=[(conduct_research, conduct_feasibility), (conduct_feasibility, draft_designs)])
design_selection = gen.partial_order(dependencies=[(draft_designs.copy(), select_design)])
testing_phase = gen.partial_order(dependencies=[(build_prototype.copy(), test_functionality), (test_functionality, test_safety), (test_safety, test_market), (test_market, collect_feedback)])
refine_and_retest = gen.loop(do=testing_phase.copy(), redo=refine_prototype)


# Combining Subprocesses
initial_stages = gen.partial_order(dependencies=[(identify_idea, research_phase), (research_phase, design_selection), (design_selection, build_prototype.copy())])
prototype_development = gen.xor(refine_and_retest, gen.partial_order(dependencies=[(testing_phase.copy(), approve_prototype), (testing_phase.copy(), discard_prototype)]))

# Final Model
final_model = gen.partial_order(dependencies=[(initial_stages, prototype_development)])