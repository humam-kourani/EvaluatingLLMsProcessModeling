from utils.model_generation import ModelGenerator

gen = ModelGenerator()

submit_request = gen.activity('Submit IT solution request')
assess_compatibility = gen.activity('Assess compatibility')
evaluate_cost = gen.activity('Evaluate cost and resource needs')
procure_tools = gen.activity('Procure necessary tools or licenses')
test_solution = gen.activity('Test solution')
install_solution = gen.activity('Install the solution')
rollout_solution = gen.activity('Roll out solution to requesting department')
provide_training = gen.activity('Provide training')
provide_support = gen.activity('Provide support for troubleshooting')
notify_requestor = gen.activity("Notify requestor of rejection")


assessment_poset = gen.partial_order(dependencies=[(assess_compatibility,), (evaluate_cost,)])

# Create a copy of provide_training for the optional part
optional_training = gen.xor(provide_training.copy(), None) # Training might not be needed

# Create a copy of provide_support for the path with training
provide_support_with_training = provide_support.copy()


approved_path = gen.partial_order(
    dependencies=[
        (procure_tools, test_solution),
        (test_solution, install_solution),
        (install_solution, rollout_solution),
        (rollout_solution, provide_training),
        (rollout_solution, provide_support) # Support can start during/after rollout, if no training is done
    ]
)

approved_path_with_optional_training = gen.partial_order(dependencies=[(approved_path, optional_training), (optional_training, provide_support_with_training)])


request_approved = gen.xor(approved_path_with_optional_training, None)

choice_after_assessment = gen.xor(request_approved, notify_requestor)

final_model = gen.partial_order(
    dependencies=[
        (submit_request, assessment_poset),
        (assessment_poset, choice_after_assessment)
    ]
)