from utils.model_generation import ModelGenerator

gen = ModelGenerator()

# Initial steps
search_ticket = gen.activity('Customer searches for ticket')
select_route = gen.activity('Select route')
select_date_time = gen.activity('Select date and time')

initial_steps = gen.partial_order(dependencies=[(search_ticket, select_route), (select_route, select_date_time)])


# Booking and ticketing
provide_personal_info = gen.activity('Provide personal information')
provide_payment_details = gen.activity('Provide payment details')
booking_details = gen.partial_order(dependencies=[(provide_personal_info, provide_payment_details)])

generate_ticket = gen.activity('Generate ticket')

send_ticket_email = gen.activity('Send ticket via email')
send_ticket_sms = gen.activity('Send ticket via SMS')
send_ticket = gen.xor(send_ticket_email, send_ticket_sms)


update_inventory = gen.activity('Update seat inventory')

booking_and_ticketing = gen.partial_order(dependencies=[(initial_steps, booking_details), (booking_details, generate_ticket), (generate_ticket, send_ticket), (generate_ticket, update_inventory)])


# Pre-travel
send_reminder = gen.activity('Send reminder')
send_instructions = gen.activity('Send instructions')

pre_travel_comms = gen.xor(send_reminder, send_instructions, None) # Reminders and instructions are optional



# Post-travel
customer_journey = gen.activity('Customer completes journey')
post_travel_feedback = gen.activity('Post-travel feedback or services')
post_travel = gen.xor(post_travel_feedback, None) # Feedback is optional


# Complete process
final_model = gen.partial_order(dependencies=[(booking_and_ticketing, pre_travel_comms), (pre_travel_comms, customer_journey), (customer_journey, post_travel)])