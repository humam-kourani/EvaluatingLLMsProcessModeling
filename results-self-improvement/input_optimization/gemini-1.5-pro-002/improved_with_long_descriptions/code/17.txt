from utils.model_generation import ModelGenerator

gen = ModelGenerator()

# Initial steps
place_order = gen.activity('Place order')
record_order_details = gen.activity('Record order details')
process_payment = gen.activity('Process payment')

# Payment outcome choice
notify_about_failed_payment = gen.activity('Notify about failed payment')
payment_failed = gen.partial_order(dependencies=[(notify_about_failed_payment,)])

# Successful payment path
check_stock_availability = gen.activity('Check stock availability')

# Back-order process
initiate_back_order = gen.activity('Initiate back-order')
inform_customer_about_delay = gen.activity('Inform customer about delay')
receive_back_order = gen.activity('Receive back-order')
back_order_process = gen.partial_order(dependencies=[(initiate_back_order, inform_customer_about_delay), (inform_customer_about_delay, receive_back_order)])
back_order_loop = gen.loop(do=None, redo=back_order_process)  # allows skipping if item is in stock


# In-stock item processing
pick_items_from_warehouse = gen.activity('Pick items from warehouse')
perform_quality_control_checks = gen.activity('Perform quality control checks')
package_items = gen.activity('Package items')
gift_wrap_items = gen.activity('Gift wrap items')
gift_wrap_choice = gen.xor(gift_wrap_items, None)
packaging_process = gen.partial_order(dependencies=[(pick_items_from_warehouse, perform_quality_control_checks), (perform_quality_control_checks, package_items), (package_items, gift_wrap_choice)])

# Fix: Create a copy for the in-stock processing branch
pick_items_from_warehouse_copy = pick_items_from_warehouse.copy() # this is the fix
in_stock_processing = gen.partial_order(dependencies=[(check_stock_availability, pick_items_from_warehouse_copy), (pick_items_from_warehouse_copy, packaging_process)]) # this is the fix: I included packaging process here

item_processing_choice = gen.xor(back_order_loop, in_stock_processing)



# Shipping process
prepare_shipping_documents_and_labels = gen.activity('Prepare shipping documents and labels')
prepare_documentation_for_international_orders = gen.activity('Prepare documentation for international orders')
international_order_docs = gen.xor(prepare_documentation_for_international_orders, None)
shipping_docs_process = gen.partial_order(dependencies=[(prepare_shipping_documents_and_labels, international_order_docs)])

# Combine packaging and shipping
dispatch_order = gen.activity('Dispatch order')
send_shipping_confirmation_to_customer = gen.activity('Send shipping confirmation to customer')

#Fix: dispatch_order needs to be copied since it will be used in two different partial orders
dispatch_order_copy = dispatch_order.copy() # Fix

pre_dispatch = gen.partial_order(dependencies=[(item_processing_choice, dispatch_order_copy), (shipping_docs_process, dispatch_order_copy)])



# Post-dispatch activities
update_inventory_levels = gen.activity('Update inventory levels')
send_follow_up_email = gen.activity('Send follow-up email')
confirm_delivery = gen.activity("Confirm delivery")

# Returns process
customer_reports_issue = gen.activity('Customer reports issue')
send_return_shipping_label = gen.activity('Send return shipping label')
receive_returned_items = gen.activity('Receive returned items')
inspect_returned_items = gen.activity('Inspect returned items')
process_refund = gen.activity('Process refund')
process_replacement = gen.activity('Process replacement')
refund_replacement_choice = gen.xor(process_refund, process_replacement)
returns_process = gen.partial_order(dependencies=[(customer_reports_issue, send_return_shipping_label), (send_return_shipping_label, receive_returned_items), (receive_returned_items, inspect_returned_items), (inspect_returned_items, refund_replacement_choice)])
returns_choice = gen.xor(returns_process, None)

post_dispatch = gen.partial_order(dependencies=[(dispatch_order, send_shipping_confirmation_to_customer), (send_shipping_confirmation_to_customer, update_inventory_levels), (update_inventory_levels, send_follow_up_email), (send_follow_up_email, confirm_delivery), (confirm_delivery, returns_choice)])


# Main process flow
payment_choice = gen.xor(payment_failed, pre_dispatch)

final_model = gen.partial_order(dependencies=[(place_order, record_order_details), (record_order_details, process_payment), (process_payment, payment_choice), (payment_choice, post_dispatch)])