from utils.model_generation import ModelGenerator

gen = ModelGenerator()

# Initial activity
guest_calls = gen.activity('Guest calls room service')

# Manager activities
manager_takes_order = gen.activity('Manager takes down the order')
manager_assigns_waiter = gen.activity('Manager assigns order to waiter')
manager_submits_kitchen = gen.activity('Manager submits order ticket to kitchen')
manager_gives_sommelier = gen.activity('Manager gives order to sommelier')


# Kitchen activity
kitchen_prepares = gen.activity('Kitchen prepares food')

# Sommelier activity (optional)
sommelier_prepares = gen.activity('Sommelier fetches wine and prepare alcoholic beverages')
optional_sommelier = gen.xor(sommelier_prepares, None)

# Waiter activities
waiter_prepares_drinks = gen.activity('Waiter prepares nonalcoholic drinks')
waiter_readies_cart = gen.activity('Waiter readies cart')
waiter_delivers = gen.activity('Waiter delivers order to guest\'s room')
waiter_returns = gen.activity('Waiter returns to room-service station')
waiter_debits = gen.activity('Waiter debits guest\'s account')
waiter_delays_debit = gen.activity("Waiter waits/delays debiting")
optional_waiter_delay = gen.xor(waiter_delays_debit, None)



# Main process flow (combining all parts)
final_model = gen.partial_order(dependencies=[
    (guest_calls, manager_takes_order),
    (manager_takes_order, manager_assigns_waiter),
    (manager_assigns_waiter, manager_submits_kitchen),
    (manager_assigns_waiter, manager_gives_sommelier),
    (manager_submits_kitchen, kitchen_prepares),
    (manager_gives_sommelier, optional_sommelier),
    (kitchen_prepares, waiter_readies_cart),
    (optional_sommelier, waiter_readies_cart),
    (waiter_prepares_drinks, waiter_readies_cart),
    (waiter_readies_cart, waiter_delivers),
    (waiter_delivers, waiter_returns),
    (waiter_returns, optional_waiter_delay),
    (optional_waiter_delay, waiter_debits)
])