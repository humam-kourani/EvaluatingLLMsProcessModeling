from utils.model_generation import ModelGenerator

gen = ModelGenerator()

report_incident = gen.activity('Report incident')
log_report = gen.activity('Log report into tracking system')
assign_report = gen.activity('Assign report to appropriate team')
gather_information = gen.activity('Gather necessary information')
identify_cause = gen.activity('Identify cause of incident')
propose_corrective_actions = gen.activity('Propose corrective actions')

implement_fix = gen.activity('Implement fix')
conduct_training = gen.activity('Conduct training')
change_policy = gen.activity('Change policy')

corrective_actions = gen.partial_order(dependencies=[(implement_fix,), (conduct_training,), (change_policy,)])

conduct_follow_up = gen.activity('Conduct follow-up')
close_incident_report = gen.activity('Close incident report')
notify_stakeholders = gen.activity('Notify all stakeholders')

# Create a copy of propose_corrective_actions for the redo part
propose_corrective_actions_redo = propose_corrective_actions.copy()


resolution_process = gen.partial_order(dependencies=[
    (propose_corrective_actions, corrective_actions),
    (corrective_actions, conduct_follow_up),
    (conduct_follow_up, close_incident_report),
    (close_incident_report, notify_stakeholders)])

redo_resolution = gen.loop(do=resolution_process, redo=propose_corrective_actions_redo)


final_model = gen.partial_order(dependencies=[
    (report_incident, log_report),
    (log_report, assign_report),
    (assign_report, gather_information),
    (gather_information, identify_cause),
    (identify_cause, redo_resolution)])