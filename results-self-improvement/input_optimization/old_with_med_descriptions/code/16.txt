from utils.model_generation import ModelGenerator

gen = ModelGenerator()

# Initial activities
send_notification = gen.activity('Send notification')
prepare_financial_statements = gen.activity('Prepare financial statements')
gather_necessary_documents = gen.activity('Gather necessary documents')
check_regulatory_updates = gen.activity('Check regulatory updates')

# Document submission and review
submit_documents = gen.activity('Submit documents')
review_submission = gen.activity('Review submission')
request_clarifications_of_discrepancies = gen.activity('Request clarifications of discrepancies')
receive_clarifications = gen.activity('Receive clarifications')

# Clarification loop
clarification_loop = gen.loop(do=None, redo=request_clarifications_of_discrepancies)

# Create a copy of review_submission
review_submission_copy = review_submission.copy()

review_clarification_sequence = gen.partial_order(dependencies=[(review_submission_copy, clarification_loop), (clarification_loop, receive_clarifications)])






# Risk assessment
evaluate_financial_risks = gen.activity('Evaluate financial risks')
evaluate_operational_risks = gen.activity('Evaluate operational risks')
evaluate_compliance_risks = gen.activity('Evaluate compliance risks')

risk_assessment_activities = gen.partial_order(dependencies=[(evaluate_financial_risks,), (evaluate_operational_risks,), (evaluate_compliance_risks,)])
complete_risk_assessment_mitigation = gen.activity('Complete risk assessment/mitigation')
risk_assessment = gen.partial_order(dependencies=[(risk_assessment_activities, complete_risk_assessment_mitigation)])

# Detailed investigation
launch_detailed_investigation = gen.activity('Launch detailed investigation')
conduct_data_analysis = gen.activity('Conduct data analysis')
conduct_interviews = gen.activity('Conduct interviews')
perform_site_visits = gen.activity('Perform site visits')

investigation_activities = gen.partial_order(dependencies=[(conduct_data_analysis,), (conduct_interviews,), (perform_site_visits,)])

detailed_investigation = gen.xor(investigation_activities, None) # Optional detailed Investigation


# Report compilation and review
compile_audit_report = gen.activity('Compile audit report')
review_report_by_audit_director = gen.activity('Review report by audit director')
approve_report = gen.activity('Approve report')
send_report_for_revision = gen.activity('Send report for revision')
update_and_resubmit_report = gen.activity('Update and resubmit report')


revision_loop = gen.loop(do=send_report_for_revision, redo=update_and_resubmit_report)
review_process = gen.xor(approve_report, revision_loop)

# Create a copy of review_report_by_audit_director
review_report_by_audit_director_copy = review_report_by_audit_director.copy()

report_review_sequence = gen.partial_order(dependencies=[(review_report_by_audit_director_copy, review_process)])





# Finalization
distribute_final_report = gen.activity('Distribute final report')
archive_report = gen.activity('Archive report')
close_audit_process = gen.activity('Close audit process')



# Fix: Create copies for activities used in final_steps
distribute_final_report_copy = distribute_final_report.copy()
archive_report_copy = archive_report.copy()

final_steps = gen.partial_order(dependencies=[(distribute_final_report_copy,), (archive_report_copy,)])



# Main process flow
main_process = gen.partial_order(
    dependencies=[
        (send_notification, prepare_financial_statements),
        (send_notification, gather_necessary_documents),
        (send_notification, check_regulatory_updates),
        (prepare_financial_statements, submit_documents),
        (gather_necessary_documents, submit_documents),
        (submit_documents, review_submission),
        (review_submission, review_clarification_sequence),
        (review_clarification_sequence, risk_assessment),
        (check_regulatory_updates, risk_assessment),
        (risk_assessment, launch_detailed_investigation),
        (launch_detailed_investigation, detailed_investigation),
        (detailed_investigation, compile_audit_report),        
        (compile_audit_report, review_report_by_audit_director),
        (review_report_by_audit_director, report_review_sequence),
        (report_review_sequence, distribute_final_report),
        (distribute_final_report, final_steps), # Use the original distribute_final_report
        (final_steps, close_audit_process),
    ]
)



final_model = main_process