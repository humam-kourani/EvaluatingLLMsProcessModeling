from utils.model_generation import ModelGenerator

gen = ModelGenerator(True, True)

# Initial activities
guest_calls_room_service = gen.activity('Guest calls room service')
manager_takes_order = gen.activity('Manager takes down the order')

# Manager's actions after taking the order
manager_assigns_waiter = gen.activity('Manager assigns order to waiter')
manager_gives_sommelier = gen.activity('Manager gives order to sommelier')
manager_submits_kitchen = gen.activity('Manager submits order ticket to kitchen')

# Preparation activities
kitchen_prepares_food = gen.activity('Kitchen prepares food')
sommelier_fetches_wine = gen.activity('Sommelier fetches wine and prepare alcoholic beverages')
waiter_prepares_drinks = gen.activity('Waiter prepares nonalcoholic drinks')
waiter_readies_cart = gen.activity('Waiter readies cart')


# Waiter's actions after preparations
waiter_delivers_order = gen.activity('Waiter delivers order to guest\'s room')
waiter_returns = gen.activity('Waiter returns to room-service station')
waiter_debits_account = gen.activity('Waiter debits guest\'s account')
waiter_delays_debiting = gen.activity("Waiter waits/delays debiting")




# Define the manager's actions as a partial order
manager_actions = gen.partial_order(dependencies=[
    (guest_calls_room_service, manager_takes_order),  # Guest call precedes manager action
    (manager_takes_order, manager_assigns_waiter),
    (manager_takes_order, manager_gives_sommelier),
    (manager_takes_order, manager_submits_kitchen),
    (manager_gives_sommelier, sommelier_fetches_wine), # Moved this dependency inside manager_actions
    (manager_submits_kitchen, kitchen_prepares_food) # Moved this dependency inside manager_actions



])



# Define the parallel preparation activities
parallel_preparations = gen.partial_order(dependencies=[
    (waiter_prepares_drinks, waiter_readies_cart),
    (kitchen_prepares_food, waiter_readies_cart),
    (sommelier_fetches_wine, waiter_readies_cart)
])

# Define the waiter's actions after preparation
waiter_actions = gen.partial_order(dependencies=[
    (waiter_delivers_order, waiter_returns),
    (waiter_returns, waiter_debits_account),
    (waiter_debits_account, waiter_delays_debiting)

])

# The final model connects all parts, ensuring no redundant activity usage.
final_model = gen.partial_order(dependencies=[
    (manager_actions, parallel_preparations),  # Manager's actions precede preparations
    (parallel_preparations, waiter_actions),  # Preparations precede waiter actions
    (waiter_readies_cart, waiter_delivers_order)
])