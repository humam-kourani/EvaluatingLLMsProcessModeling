from utils.model_generation import ModelGenerator

gen = ModelGenerator()

# Activities
identify_needs = gen.activity('Identify development needs or career aspirations')
create_plan = gen.activity('Create personal development plan')
work_on_skills = gen.activity('Work on skill enhancement')
receive_feedback = gen.activity('Receive feedback and evaluation from supervisors')
consider_promotion = gen.activity('Consider employee for promotion or new role')
conduct_review = gen.activity('Conducts formal performance review')
approve_promotion = gen.activity('Approve promotion')
approve_promotion_copy = approve_promotion.copy()  # Copy for reuse
set_responsibilities = gen.activity('Set new responsibilities')
adjust_compensation = gen.activity('Adjust compensation')
transition_role = gen.activity('Transition into new role')

# Skill enhancement and feedback loop
enhancement_feedback_loop = gen.loop(do=work_on_skills, redo=receive_feedback)

# Consider promotion and formal review sequence
promotion_review_sequence = gen.partial_order(
    dependencies=[(consider_promotion, conduct_review), (conduct_review, approve_promotion)]
)

# Promotion approval subprocess with copied 'approve_promotion' activity
approval_process = gen.partial_order(
    dependencies=[(approve_promotion_copy, set_responsibilities), (set_responsibilities, adjust_compensation),
                  (adjust_compensation, transition_role)]
)

# Final model: the entire process
final_model = gen.partial_order(
    dependencies=[(identify_needs, create_plan), (create_plan, enhancement_feedback_loop), 
                  (enhancement_feedback_loop, promotion_review_sequence), 
                  (promotion_review_sequence, approval_process)]
)