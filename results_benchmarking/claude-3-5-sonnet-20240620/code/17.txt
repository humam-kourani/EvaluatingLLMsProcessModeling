from utils.model_generation import ModelGenerator

gen = ModelGenerator()

# Initial activities
place_order = gen.activity('Place order')
record_order = gen.activity('Record order details')

# Stock check and back-order process
check_stock = gen.activity('Check stock availability')
initiate_backorder = gen.activity('Initiate back-order')
inform_delay = gen.activity('Inform customer about delay')
receive_backorder = gen.activity('Receive back-order')
backorder_process = gen.partial_order(dependencies=[
    (initiate_backorder, inform_delay),
    (inform_delay, receive_backorder)
])
stock_check_process = gen.xor(check_stock, backorder_process)

# Order preparation
pick_items = gen.activity('Pick items from warehouse')
quality_control = gen.activity('Perform quality control checks')
package_items = gen.activity('Package items')
gift_wrap = gen.activity('Gift wrap items')
packaging_process = gen.partial_order(dependencies=[
    (package_items, gen.xor(gift_wrap, None))
])

# Shipping preparation
prepare_shipping_docs = gen.activity('Prepare shipping documents and labels')
prepare_intl_docs = gen.activity('Prepare documentation for international orders')
shipping_docs_process = gen.partial_order(dependencies=[
    (prepare_shipping_docs, gen.xor(prepare_intl_docs, None))
])

# Dispatch and follow-up
dispatch_order = gen.activity('Dispatch order')
send_confirmation = gen.activity('Send shipping confirmation to customer')
update_inventory = gen.activity('Update inventory levels')
confirm_delivery = gen.activity('Confirm delivery')
send_followup = gen.activity('Send follow-up email')

# Returns process
customer_reports_issue = gen.activity('Customer reports issue')
send_return_label = gen.activity('Send return shipping label')
receive_returned_items = gen.activity('Receive returned items')
inspect_returned_items = gen.activity('Inspect returned items')
process_refund = gen.activity('Process refund')
process_replacement = gen.activity('Process replacement')

returns_process = gen.partial_order(dependencies=[
    (customer_reports_issue, send_return_label),
    (send_return_label, receive_returned_items),
    (receive_returned_items, inspect_returned_items),
    (inspect_returned_items, gen.xor(process_refund, process_replacement))
])

# Main process flow including optional returns process
successful_process = gen.partial_order(dependencies=[
    (stock_check_process, pick_items),
    (pick_items, quality_control),
    (quality_control, packaging_process),
    (packaging_process, dispatch_order),
    (shipping_docs_process, dispatch_order),
    (dispatch_order, send_confirmation),
    (send_confirmation, update_inventory),
    (update_inventory, confirm_delivery),
    (confirm_delivery, send_followup),
    (send_followup, gen.xor(returns_process, None))
])

# Payment process with success and failure paths
process_payment = gen.activity('Process payment')
payment_failed = gen.activity('Notify about failed payment')

# Final model
final_model = gen.partial_order(dependencies=[
    (place_order, record_order),
    (record_order, gen.xor(
        gen.partial_order(dependencies=[(process_payment, payment_failed)]),
        gen.partial_order(dependencies=[(process_payment.copy(), successful_process)])
    ))
])