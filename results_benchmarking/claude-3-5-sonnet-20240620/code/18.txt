from utils.model_generation import ModelGenerator
gen = ModelGenerator()

# Initial application process
submit_application = gen.activity("Submit application online")
review_application = gen.activity("Review application and documents")
notify_missing = gen.activity("Notify applicant of missing documents")
provide_missing = gen.activity("Provide missing documents")
missing_docs_loop = gen.loop(do=notify_missing, redo=provide_missing)
docs_check = gen.xor(missing_docs_loop, None)

application_review = gen.partial_order(dependencies=[
    (submit_application, review_application),
    (review_application, docs_check)
])

# Evaluation and decision
evaluate_application = gen.activity("Evaluate application by admissions committee")
process_fees = gen.activity("Process fees or waivers")
send_acceptance = gen.activity("Send acceptance letter")
send_rejection = gen.activity("Send rejection letter")

evaluation_decision = gen.partial_order(dependencies=[
    (evaluate_application,),
    (process_fees,)
])

decision = gen.xor(send_acceptance, send_rejection)

# Post-acceptance process
confirm_enrollment = gen.activity("Confirm enrollment")
cancel_application = gen.activity("Cancel application")
confirmation = gen.xor(confirm_enrollment, cancel_application)

# Orientation and account setup
send_orientation = gen.activity("Send orientation materials")
setup_it = gen.activity("Set up IT accounts")
assist_visa = gen.activity("Assist with visa processing")
optional_visa = gen.xor(assist_visa, None)

orientation_setup = gen.partial_order(dependencies=[
    (send_orientation,),
    (setup_it,),
    (optional_visa,)
])

# Student onboarding
get_id = gen.activity("Obtain student ID card")
meet_advisor = gen.activity("Meet with academic advisor")
select_courses = gen.activity("Select courses")
resolve_conflicts = gen.activity("Resolve schedule conflicts")

study_plan = gen.partial_order(dependencies=[
    (get_id,),
    (meet_advisor, select_courses),
    (select_courses, resolve_conflicts)
])

# Semester activities
begin_classes = gen.activity("Begin attending classes")
add_drop = gen.activity("Add/drop courses")
post_grades = gen.activity("Post grades")
review_grades = gen.activity("Review grades online")

optional_add_drop = gen.xor(add_drop, None)

semester_activities = gen.partial_order(dependencies=[
    (begin_classes, optional_add_drop),
    (optional_add_drop, post_grades),
    (post_grades, review_grades)
])

# Appeals process
submit_appeal = gen.activity("Submit appeal form")
meet_appeals = gen.activity("Meet with appeals committee")
await_decision = gen.activity("Await decision")

appeals_process = gen.partial_order(dependencies=[
    (submit_appeal, meet_appeals),
    (meet_appeals, await_decision)
])

optional_appeals = gen.xor(appeals_process, None)

# Semester loop
semester_loop = gen.loop(
    do=gen.partial_order(dependencies=[
        (semester_activities, optional_appeals)
    ]),
    redo=None
)

# Graduation or withdrawal
graduate = gen.activity("Graduate")
withdraw = gen.activity("Withdraw")
end_studies = gen.xor(graduate, withdraw)

# Combining all parts
enrollment_process = gen.partial_order(dependencies=[
    (application_review, evaluation_decision),
    (evaluation_decision, decision),
    (decision, confirmation),
    (confirmation, orientation_setup),
    (orientation_setup, study_plan),
    (study_plan, semester_loop),
    (semester_loop, end_studies)
])

final_model = enrollment_process