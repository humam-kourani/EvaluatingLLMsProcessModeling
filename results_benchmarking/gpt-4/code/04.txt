from utils.model_generation import ModelGenerator

gen = ModelGenerator()

# Define activities
define_objectives = gen.activity('Define campaign objectives')
create_content = gen.activity('Create content')
design_visuals = gen.activity('Design visuals')
select_channels = gen.activity('Select promotion channels')
launch_campaign_pre = gen.activity('Launch campaign')  # for pre-launch
launch_campaign_post = gen.activity('Launch campaign').copy()  # for post-launch
track_performance = gen.activity('Track performance in real-time')
collect_leads = gen.activity('Collect leads in CRM system')
follow_up_leads = gen.activity('Sales teams follows up on leads')
campaign_ends = gen.activity('Campaign period ends')
analyze_performance = gen.activity('Analyze performance for future optimization')

# Model the sequence of activities for pre-launch
pre_launch_activities = gen.partial_order(dependencies=[
    (define_objectives, create_content),
    (create_content, design_visuals),
    (design_visuals, select_channels),
    (select_channels, launch_campaign_pre)
])

# Model the sequence of activities for post-launch
post_launch_activities = gen.partial_order(dependencies=[
    (launch_campaign_post, track_performance),
    (track_performance, collect_leads),
    (collect_leads, follow_up_leads),
    (follow_up_leads, campaign_ends),
    (campaign_ends, analyze_performance)
])

# Combine pre-launch and post-launch activities into the final model
final_model = gen.partial_order(dependencies=[
    (pre_launch_activities, post_launch_activities)
])