from utils.model_generation import ModelGenerator
gen = ModelGenerator()

# Define activities
submit_application = gen.activity('Submit application online')
review_application = gen.activity('Review application and documents')
notify_missing_docs = gen.activity('Notify applicant of missing documents')
provide_missing_docs = gen.activity('Provide missing documents')
evaluate_application = gen.activity('Evaluate application by admissions committee')
process_fees = gen.activity('Process fees or waivers')
send_acceptance = gen.activity('Send acceptance letter')
send_rejection = gen.activity('Send rejection letter')
confirm_enrollment = gen.activity('Confirm enrollment')
cancel_application = gen.activity('Cancel application')
send_orientation_materials = gen.activity('Send orientation materials')
set_up_it_accounts = gen.activity('Set up IT accounts')
assist_visa = gen.activity('Assist with visa processing')
obtain_id_card = gen.activity('Obtain student ID card')
meet_advisor = gen.activity('Meet with academic advisor')
select_courses = gen.activity('Select courses')
resolve_conflicts = gen.activity('Resolve schedule conflicts')
begin_classes = gen.activity('Begin attending classes')
add_drop_courses = gen.activity('Add/drop courses')
post_grades = gen.activity('Post grades')
review_grades = gen.activity('Review grades online')
submit_appeal = gen.activity('Submit appeal form')
meet_appeals_committee = gen.activity('Meet with appeals committee')
await_decision = gen.activity('Await decision')
grad_or_withdraw = gen.activity('Graduate')

# Define partial orders and loops
notify_provide_loop = gen.loop(do=notify_missing_docs, redo=provide_missing_docs)
evaluate_fees_poset = gen.partial_order(dependencies=[(evaluate_application.copy(), process_fees)])
acceptance_choice = gen.xor(send_acceptance, send_rejection)
confirm_or_cancel = gen.xor(confirm_enrollment, cancel_application)
orientation_it_visa_poset = gen.partial_order(dependencies=[(send_orientation_materials,), (set_up_it_accounts,), (assist_visa,)])
study_plan_poset = gen.partial_order(dependencies=[(meet_advisor, select_courses), (select_courses, resolve_conflicts)])
add_drop_loop = gen.loop(do=add_drop_courses, redo=None)
appeal_process_poset = gen.partial_order(dependencies=[(submit_appeal, meet_appeals_committee), (meet_appeals_committee, await_decision)])

# Combine subprocesses into the final model
final_model = gen.partial_order(
    dependencies=[
        (submit_application, review_application),
        (review_application, gen.xor(notify_provide_loop, evaluate_application.copy())),
        (evaluate_application.copy(), evaluate_fees_poset),
        (evaluate_fees_poset, acceptance_choice),
        (acceptance_choice, confirm_or_cancel),
        (confirm_or_cancel, orientation_it_visa_poset),
        (orientation_it_visa_poset, obtain_id_card),
        (obtain_id_card, study_plan_poset),
        (study_plan_poset, begin_classes),
        (begin_classes, add_drop_loop),
        (add_drop_loop, post_grades),
        (post_grades, review_grades),
        (review_grades, appeal_process_poset),
        (appeal_process_poset, grad_or_withdraw)
    ]
)