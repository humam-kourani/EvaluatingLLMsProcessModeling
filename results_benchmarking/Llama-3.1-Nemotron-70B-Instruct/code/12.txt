from utils.model_generation import ModelGenerator

gen = ModelGenerator()

# Define activities
identify_development_needs = gen.activity('Identify development needs or career aspirations')
create_development_plan = gen.activity('Create personal development plan')
work_on_skill_enhancement = gen.activity('Work on skill enhancement')
receive_feedback = gen.activity('Receive feedback and evaluation from supervisors')
consider_for_promotion = gen.activity('Consider employee for promotion or new role')
conduct_formal_review = gen.activity('Conducts formal performance review')
approve_promotion = gen.activity('Approve promotion')
approve_promotion_copy = approve_promotion.copy()  # Create a copy for standalone use
set_new_responsibilities = gen.activity('Set new responsibilities')
adjust_compensation = gen.activity('Adjust compensation')
transition_into_new_role = gen.activity('Transition into new role')

# Define subprocess for receiving feedback and working on skill enhancement (concurrent)
skill_enhancement_feedback = gen.partial_order(dependencies=[(work_on_skill_enhancement,), (receive_feedback,)])

# Define subprocess for promotion approval and new role setup (sequential)
promotion_approval_setup = gen.partial_order(
    dependencies=[(approve_promotion_copy, set_new_responsibilities), 
                  (set_new_responsibilities, adjust_compensation), 
                  (adjust_compensation, transition_into_new_role)])

# Define overall process (sequential with concurrency for skill enhancement and feedback)
final_model = gen.partial_order(
    dependencies=[(identify_development_needs, create_development_plan), 
                  (create_development_plan, skill_enhancement_feedback),
                  (skill_enhancement_feedback, consider_for_promotion), 
                  (consider_for_promotion, conduct_formal_review), 
                  (conduct_formal_review, approve_promotion), 
                  (approve_promotion, promotion_approval_setup)])