from utils.model_generation import ModelGenerator
gen = ModelGenerator()

# Define activities
place_order = gen.activity('Place order')
record_order_details = gen.activity('Record order details')
process_payment = gen.activity('Process payment')
notify_failed_payment = gen.activity('Notify about failed payment')
check_stock_availability = gen.activity('Check stock availability')
initiate_back_order = gen.activity('Initiate back-order')
receive_back_order = gen.activity('Receive back-order')
pick_items_from_warehouse = gen.activity('Pick items from warehouse')
perform_quality_control_checks = gen.activity('Perform quality control checks')
package_items = gen.activity('Package items')
gift_wrap_items = gen.activity('Gift wrap items')
prepare_shipping_documents_and_labels = gen.activity('Prepare shipping documents and labels')
dispatch_order = gen.activity('Dispatch order')
send_shipping_confirmation_to_customer = gen.activity('Send shipping confirmation to customer')
update_inventory_levels = gen.activity('Update inventory levels')
send_follow_up_email = gen.activity('Send follow-up email')
confirm_delivery = gen.activity('Confirm delivery')
customer_reports_issue = gen.activity('Customer reports issue')
send_return_shipping_label = gen.activity('Send return shipping label')
receive_returned_items = gen.activity('Receive returned items')
inspect_returned_items = gen.activity('Inspect returned items')
process_refund = gen.activity('Process refund')
process_replacement = gen.activity('Process replacement')

# Define subprocesses and dependencies
process_payment_choice = gen.xor(process_payment, notify_failed_payment)
stock_availability = gen.xor(gen.activity('Items in stock'), initiate_back_order)
back_order_dependencies = [(initiate_back_order.copy(), receive_back_order)]
back_order_process = gen.partial_order(dependencies=back_order_dependencies)
packaging_dependencies = [(pick_items_from_warehouse.copy(), perform_quality_control_checks),
                          (perform_quality_control_checks, package_items),
                          (package_items, gift_wrap_items)]
packaging = gen.partial_order(dependencies=packaging_dependencies)
shipping_dependencies = [(prepare_shipping_documents_and_labels, dispatch_order),
                         (dispatch_order, send_shipping_confirmation_to_customer),
                         (send_shipping_confirmation_to_customer, update_inventory_levels)]
shipping = gen.partial_order(dependencies=shipping_dependencies)
follow_up_dependencies = [(confirm_delivery, send_follow_up_email)]
follow_up = gen.partial_order(dependencies=follow_up_dependencies)
returns_dependencies = [(customer_reports_issue, send_return_shipping_label),
                        (send_return_shipping_label, receive_returned_items),
                        (receive_returned_items, inspect_returned_items)]
returns_process = gen.partial_order(dependencies=returns_dependencies)
returns_choice = gen.xor(returns_process.copy(), None)

# Combine subprocesses and dependencies into a final model
fulfillment_process = gen.partial_order(
    dependencies=[(place_order, record_order_details),
                  (record_order_details, process_payment_choice),
                  (process_payment_choice, check_stock_availability),
                  (check_stock_availability, stock_availability),
                  (stock_availability, pick_items_from_warehouse),
                  (pick_items_from_warehouse, packaging),
                  (packaging, shipping),
                  (shipping, follow_up),
                  (follow_up, returns_choice)])

# Final model
final_model = gen.partial_order(dependencies=[(fulfillment_process.copy(), returns_choice.copy())])