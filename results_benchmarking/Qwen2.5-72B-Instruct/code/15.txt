from utils.model_generation import ModelGenerator
gen = ModelGenerator()

# Define activities
schedule_audit = gen.activity('Schedule compliance audit')
prepare_doc = gen.activity('Prepare documentation')
gather_evidence = gen.activity('Gather evidence')
conduct_self_assessment = gen.activity('Conduct self-assessment')
conduct_external_audit = gen.activity('Conduct external audit')
identify_gaps = gen.activity('Identify gaps or issues')
make_corrections = gen.activity('Make necessary corrections or improvements')
conduct_final_audit = gen.activity('Conduct final audit')
award_certification = gen.activity('Award certification')
issue_documents = gen.activity('Issue official documents')

# Define the sequence of activities
initial_preparation = gen.partial_order(dependencies=[
    (schedule_audit, prepare_doc),
    (schedule_audit, gather_evidence),
    (schedule_audit, conduct_self_assessment),
    (prepare_doc, conduct_external_audit),
    (gather_evidence, conduct_external_audit),
    (conduct_self_assessment, conduct_external_audit)
])

# Create a copy of conduct_external_audit for the external audit phase
conduct_external_audit_copy = conduct_external_audit.copy()

external_audit_phase = gen.partial_order(dependencies=[
    (conduct_external_audit_copy, identify_gaps),
    (identify_gaps, make_corrections)
])

# Create a copy of make_corrections for the final audit phase
make_corrections_copy = make_corrections.copy()

final_audit_phase = gen.partial_order(dependencies=[
    (make_corrections_copy, conduct_final_audit),
    (conduct_final_audit, award_certification),
    (award_certification, issue_documents)
])

# Combine the phases
final_model = gen.partial_order(dependencies=[
    (initial_preparation, external_audit_phase),
    (external_audit_phase, final_audit_phase)
])

# Final model
final_model