from utils.model_generation import ModelGenerator
gen = ModelGenerator()

# Activities
identify_need = gen.activity('Identify need for new supplier or vendor')
issue_rfp = gen.activity('Issue request for proposals (RFP)')
receive_proposals = gen.activity('Receive supplier proposals')
evaluate_proposal = gen.activity('Evaluate proposal')
conduct_site_visit = gen.activity('Conduct site visit')
conduct_interview = gen.activity('Conduct interview')
select_supplier = gen.activity('Select supplier')
begin_negotiations = gen.activity('Begin contract negotiations')
sign_contract = gen.activity('Sign contract')
execute_contract = gen.activity('Execute contract')
onboard_supplier = gen.activity('Onboard supplier')

# Subprocess for evaluation and selection
evaluation_choices = gen.partial_order(dependencies=[
    (evaluate_proposal, conduct_site_visit),
    (evaluate_proposal, conduct_interview),
    (conduct_site_visit, select_supplier.copy()),  # Create a copy of select_supplier
    (conduct_interview, select_supplier.copy())    # Create another copy of select_supplier
])

# Subprocess for contract negotiations and signing
select_supplier_copy = select_supplier.copy()  # Create a copy of select_supplier
contract_process = gen.partial_order(dependencies=[
    (select_supplier_copy, begin_negotiations),
    (begin_negotiations, sign_contract)
])

# Final process
final_model = gen.partial_order(dependencies=[
    (identify_need, issue_rfp),
    (issue_rfp, receive_proposals),
    (receive_proposals, evaluation_choices),
    (evaluation_choices, contract_process),
    (contract_process, execute_contract),
    (execute_contract, onboard_supplier)
])