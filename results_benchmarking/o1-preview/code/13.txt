from utils.model_generation import ModelGenerator
gen = ModelGenerator()

file_complaint = gen.activity('File complaint')
log_complaint = gen.activity('Log complaint')
assign_complaint = gen.activity('Assign complaint to relevant department')
review_complaint = gen.activity('Review complaint details')
approve_notify = gen.activity('Approve and notify customer')
reject_notify = gen.activity('Reject and notify customer')
process_reimbursement = gen.activity('Process reimbursement')
resolve_complaint = gen.activity('Resolve complaint')
provide_feedback = gen.activity('Provide feedback')

# Approve path
approve_path = gen.partial_order(dependencies=[(approve_notify, process_reimbursement)])

# Decision point: exclusive choice between approve path and reject notify
decision = gen.xor(approve_path, reject_notify)

# Optional feedback after resolving complaint
optional_feedback = gen.xor(provide_feedback, None)

# Define the overall process dependencies
dependencies = [
    (file_complaint, log_complaint),
    (log_complaint, assign_complaint),
    (assign_complaint, review_complaint),
    (review_complaint, decision),
    (decision, resolve_complaint),
    (resolve_complaint, optional_feedback)
]

# Final process model
final_model = gen.partial_order(dependencies=dependencies)