from utils.model_generation import ModelGenerator
gen = ModelGenerator()

# Initial sequence of activities
customer_signs_up = gen.activity('Customer signs up')
generate_account = gen.activity('Generate account')
assign_access = gen.activity('Assign access')
set_billing_triggers = gen.activity('Set automatic triggers for billing cycles')

initial_sequence = gen.partial_order(dependencies=[
    (customer_signs_up, generate_account),
    (generate_account, assign_access),
    (assign_access, set_billing_triggers)
])

# Subscription activities that occur repeatedly
send_regular_updates = gen.activity('Send regular updates')
send_product_enhancements = gen.activity('Send product enhancements')
send_renewal_notifications = gen.activity('Send renewal notifications')

subscription_updates = gen.partial_order(dependencies=[
    (send_regular_updates,),
    (send_product_enhancements,),
    (send_renewal_notifications,)
])

subscription_loop = gen.loop(do=subscription_updates, redo=None)

# Cancellation process
customer_submits_cancellation_request = gen.activity('Customer submits cancellation request')
apply_refund = gen.activity('apply refund')
apply_charges = gen.activity('apply charges')
deactivate_subscription = gen.activity('Deactivate subscription')
settle_final_account_balance = gen.activity('Settle final account balance')

apply_refund_optional = gen.xor(apply_refund, None)
apply_charges_optional = gen.xor(apply_charges, None)

cancellation_processing = gen.partial_order(dependencies=[
    (customer_submits_cancellation_request, apply_refund_optional),
    (customer_submits_cancellation_request, apply_charges_optional),
    (apply_refund_optional, deactivate_subscription),
    (apply_charges_optional, deactivate_subscription),
    (deactivate_subscription, settle_final_account_balance)
])

# Final process model
final_process = gen.partial_order(dependencies=[
    (initial_sequence, subscription_loop),
    (subscription_loop, cancellation_processing)
])

final_model = final_process