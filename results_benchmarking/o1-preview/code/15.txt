from utils.model_generation import ModelGenerator
gen = ModelGenerator()

# Activities
schedule_audit = gen.activity('Schedule compliance audit')
prepare_documentation = gen.activity('Prepare documentation')
gather_evidence = gen.activity('Gather evidence')
conduct_self_assessment = gen.activity('Conduct self-assessment')
conduct_external_audit = gen.activity('Conduct external audit')
identify_gaps = gen.activity('Identify gaps or issues')
make_corrections = gen.activity('Make necessary corrections or improvements')
conduct_final_audit = gen.activity('Conduct final audit')
award_certification = gen.activity('Award certification')
issue_documents = gen.activity('Issue official documents')

# Create a copy of 'Identify gaps or issues' for reuse in the loop
identify_gaps_copy = identify_gaps.copy()

# Sequence of corrections and final audit
sequence_corrections_audit = gen.partial_order(dependencies=[
    (make_corrections, conduct_final_audit),
    (conduct_final_audit, identify_gaps_copy)
])

# Loop over corrections and final audits until no more gaps are identified
loop_corrections_audit = gen.loop(do=sequence_corrections_audit, redo=None)

# Final partial order combining all dependencies
final_model = gen.partial_order(dependencies=[
    (schedule_audit, prepare_documentation),
    (schedule_audit, gather_evidence),
    (schedule_audit, conduct_self_assessment),
    # After preparation activities, proceed to external audit
    (prepare_documentation, conduct_external_audit),
    (gather_evidence, conduct_external_audit),
    (conduct_self_assessment, conduct_external_audit),
    (conduct_external_audit, identify_gaps),
    (identify_gaps, loop_corrections_audit),
    (loop_corrections_audit, award_certification),
    (award_certification, issue_documents)
])