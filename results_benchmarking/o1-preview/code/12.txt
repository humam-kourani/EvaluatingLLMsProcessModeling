from utils.model_generation import ModelGenerator
gen = ModelGenerator()

# Activities
identify_needs = gen.activity('Identify development needs or career aspirations')
create_plan = gen.activity('Create personal development plan')
work_on_skills = gen.activity('Work on skill enhancement')
receive_feedback = gen.activity('Receive feedback and evaluation from supervisors')
consider_promotion = gen.activity('Consider employee for promotion or new role')
conduct_review = gen.activity('Conducts formal performance review')
approve_promotion = gen.activity('Approve promotion')
adjust_compensation = gen.activity('Adjust compensation')
set_responsibilities = gen.activity('Set new responsibilities')
transition_role = gen.activity('Transition into new role')

# Skill enhancement activities (concurrent)
skill_enhancement_activities = gen.partial_order(
    dependencies=[
        (work_on_skills,),
        (receive_feedback,)
    ]
)

# Skill enhancement loop
skill_enhancement_loop = gen.loop(do=skill_enhancement_activities, redo=None)

# Adjust compensation and set responsibilities (concurrent)
adjust_and_set = gen.partial_order(
    dependencies=[
        (adjust_compensation,),
        (set_responsibilities,)
    ]
)

# Main process flow
final_model = gen.partial_order(
    dependencies=[
        (identify_needs, create_plan),
        (create_plan, skill_enhancement_loop),
        (skill_enhancement_loop, consider_promotion),
        (consider_promotion, conduct_review),
        (conduct_review, approve_promotion),
        (approve_promotion, adjust_and_set),
        (adjust_and_set, transition_role)
    ]
)