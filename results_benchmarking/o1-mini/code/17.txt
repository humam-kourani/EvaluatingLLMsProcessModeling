from utils.model_generation import ModelGenerator
gen = ModelGenerator()

# Define activities
place_order = gen.activity('Place order')
record_order_details = gen.activity('Record order details')
process_payment = gen.activity('Process payment')
notify_failed_payment = gen.activity('Notify about failed payment')
check_stock_availability = gen.activity('Check stock availability')
initiate_back_order = gen.activity('Initiate back-order')
inform_customer_about_delay = gen.activity('Inform customer about delay')
receive_back_order = gen.activity('Receive back-order')
pick_items_from_warehouse = gen.activity('Pick items from warehouse')
perform_quality_control_checks = gen.activity('Perform quality control checks')
package_items = gen.activity('Package items')
gift_wrap_items = gen.activity('Gift wrap items')
prepare_shipping_documents_and_labels = gen.activity('Prepare shipping documents and labels')
prepare_documentation_for_international_orders = gen.activity('Prepare documentation for international orders')
dispatch_order = gen.activity('Dispatch order')
send_shipping_confirmation_to_customer = gen.activity('Send shipping confirmation to customer')
update_inventory_levels = gen.activity('Update inventory levels')
send_follow_up_email = gen.activity('Send follow-up email')
customer_reports_issue = gen.activity('Customer reports issue')
send_return_shipping_label = gen.activity('Send return shipping label')
receive_returned_items = gen.activity('Receive returned items')
inspect_returned_items = gen.activity('Inspect returned items')
process_refund = gen.activity('Process refund')
process_replacement = gen.activity('Process replacement')

# Define the returns process
refund_or_replace = gen.xor(process_refund, process_replacement)
returns_process = gen.partial_order(dependencies=[
    (send_return_shipping_label, receive_returned_items),
    (receive_returned_items, inspect_returned_items),
    (inspect_returned_items, refund_or_replace)
])

issue_and_returns = gen.partial_order(dependencies=[
    (customer_reports_issue, returns_process)
])

issue_choice = gen.xor(issue_and_returns, None)

# Define optional gift wrap
gift_wrap_optional = gen.xor(gift_wrap_items, None)

# Define optional international documentation
international_doc_optional = gen.xor(prepare_documentation_for_international_orders, None)

# Define the main shipping process dependencies
dependencies_main_shipping = [
    (pick_items_from_warehouse, perform_quality_control_checks),
    (perform_quality_control_checks, package_items),
    (package_items, gift_wrap_optional),
    (gift_wrap_optional, dispatch_order),
    (prepare_shipping_documents_and_labels, international_doc_optional),
    (international_doc_optional, dispatch_order),
    (dispatch_order, send_shipping_confirmation_to_customer),
    (dispatch_order, update_inventory_levels),
    (send_shipping_confirmation_to_customer, send_follow_up_email),
    (update_inventory_levels, send_follow_up_email),
    (send_follow_up_email, issue_choice)
]

main_shipping_process = gen.partial_order(dependencies=dependencies_main_shipping)

# Define the back-order loop
do_back_order = gen.partial_order(dependencies=[
    (initiate_back_order, inform_customer_about_delay)
])

redo_back_order = gen.partial_order(dependencies=[
    (receive_back_order, check_stock_availability)
])

back_order_loop = gen.loop(do=do_back_order, redo=redo_back_order)

# Define the stock choice between main shipping process and back-order loop
stock_choice = gen.xor(main_shipping_process, back_order_loop)

# Define the payment choice between notifying failed payment and proceeding with stock check
payment_choice = gen.xor(notify_failed_payment, stock_choice)

# Define the initial sequence of the process
initial_dependencies = [
    (place_order, record_order_details),
    (record_order_details, process_payment),
    (process_payment, payment_choice)
]

initial_model = gen.partial_order(dependencies=initial_dependencies)

# Set the final_model
final_model = initial_model