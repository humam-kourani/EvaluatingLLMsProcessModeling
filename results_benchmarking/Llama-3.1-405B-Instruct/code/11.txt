from utils.model_generation import ModelGenerator
gen = ModelGenerator()

# Define activities
customer_signs_up = gen.activity('Customer signs up')
generate_account = gen.activity('Generate account')
assign_access = gen.activity('Assign access')
set_automatic_triggers_for_billing_cycles = gen.activity('Set automatic triggers for billing cycles')
send_regular_updates = gen.activity('Send regular updates')
send_product_enhancements = gen.activity('Send product enhancements')
send_renewal_notifications = gen.activity('Send renewal notifications')
customer_submits_cancellation_request = gen.activity('Customer submits cancellation request')
apply_refund = gen.activity('apply refund')
apply_charges = gen.activity('apply charges')
settle_final_account_balance = gen.activity('Settle final account balance')
deactivate_subscription = gen.activity('Deactivate subscription')

# Define exclusive choice for applying refund or charges
refund_or_charges = gen.xor(apply_refund, apply_charges)

# Define partial order for main process
poset_main_process = gen.partial_order(dependencies=[
    (customer_signs_up, generate_account),
    (generate_account, assign_access),
    (assign_access, set_automatic_triggers_for_billing_cycles),
    (set_automatic_triggers_for_billing_cycles, send_regular_updates),
    (set_automatic_triggers_for_billing_cycles, send_product_enhancements),
    (set_automatic_triggers_for_billing_cycles, send_renewal_notifications),
    (send_regular_updates, customer_submits_cancellation_request),
    (send_product_enhancements, customer_submits_cancellation_request),
    (send_renewal_notifications, customer_submits_cancellation_request),
    (customer_submits_cancellation_request, refund_or_charges),
    (refund_or_charges, settle_final_account_balance),
    (settle_final_account_balance, deactivate_subscription)
])

# Define final model
final_model = poset_main_process