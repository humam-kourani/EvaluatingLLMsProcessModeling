from utils.model_generation import ModelGenerator

gen = ModelGenerator()

# Initial steps
submit_application = gen.activity('Submit application online')
review_application = gen.activity('Review application and documents')
notify_missing_docs = gen.activity('Notify applicant of missing documents')
provide_missing_docs = gen.activity('Provide missing documents')
missing_docs_loop = gen.loop(do=None, redo=provide_missing_docs)
handle_missing_docs = gen.partial_order(dependencies=[(notify_missing_docs, missing_docs_loop)])
optional_missing_docs = gen.xor(handle_missing_docs, None)

evaluate_application = gen.activity('Evaluate application by admissions committee')
process_fees = gen.activity('Process fees or waivers')
eval_fees = gen.partial_order(dependencies=[(evaluate_application,), (process_fees,)])
initial_steps = gen.partial_order(dependencies=[(submit_application, review_application), (review_application, optional_missing_docs), (optional_missing_docs, eval_fees)])

# Acceptance and confirmation
send_acceptance = gen.activity('Send acceptance letter')
send_rejection = gen.activity('Send rejection letter')
acceptance_choice = gen.xor(send_acceptance, send_rejection)

confirm_enrollment = gen.activity('Confirm enrollment')
cancel_application = gen.activity('Cancel application')
enrollment_choice = gen.xor(confirm_enrollment, cancel_application)
send_orientation = gen.activity('Send orientation materials')
setup_it = gen.activity('Set up IT accounts')
it_orientation = gen.partial_order(dependencies=[(send_orientation,), (setup_it,)])

# Create a copy of send_acceptance to avoid reusing the same node
send_acceptance_copy = send_acceptance.copy()

after_acceptance = gen.partial_order(dependencies=[(send_acceptance_copy, enrollment_choice), (enrollment_choice, it_orientation)])

# Pre-semester activities
assist_visa = gen.activity('Assist with visa processing')
optional_visa = gen.xor(assist_visa, None)
obtain_id = gen.activity('Obtain student ID card')
meet_advisor = gen.activity('Meet with academic advisor')
select_courses = gen.activity('Select courses')
resolve_conflicts = gen.activity('Resolve schedule conflicts')
study_plan = gen.partial_order(dependencies=[(meet_advisor, select_courses), (select_courses, resolve_conflicts)])
pre_semester = gen.partial_order(dependencies=[(optional_visa,), (obtain_id,), (study_plan,)])

# Semester activities
begin_classes = gen.activity('Begin attending classes')
add_drop = gen.activity('Add/drop courses')
post_grades = gen.activity('Post grades')
review_grades = gen.activity('Review grades online')
semester_activities = gen.partial_order(dependencies=[(begin_classes, add_drop), (add_drop, post_grades), (post_grades, review_grades)])

# Appeal process
submit_appeal = gen.activity('Submit appeal form')
meet_appeals = gen.activity('Meet with appeals committee')
await_decision = gen.activity('Await decision')
appeal_process = gen.partial_order(dependencies=[(submit_appeal, meet_appeals), (meet_appeals, await_decision)])
optional_appeal = gen.xor(appeal_process, None)

one_semester = gen.partial_order(dependencies=[(pre_semester, semester_activities), (semester_activities, optional_appeal)])

graduate = gen.activity('Graduate')
withdraw = gen.activity('Withdraw')
grad_withdraw = gen.xor(graduate, withdraw)
semester_loop = gen.loop(do=one_semester, redo=None)
semester_loop_end = gen.partial_order([(semester_loop, grad_withdraw)])


# Combine all parts
main_process = gen.partial_order(dependencies=[(initial_steps, acceptance_choice), (acceptance_choice, after_acceptance), (after_acceptance, semester_loop_end)])

final_model = main_process